#!/usr/bin/env python3
# encoding: utf-8

import argparse
import subprocess
import sys

# networkx must be installed before use
#   $ sudo apt-get install python3-networkx
#
import networkx

# important to read - the graphml won't render nicely by default:
# http://thirld.com/blog/2012/01/31/making-yed-import-labels-from-graphml-files/


def main():

    default_output = 'out.graphml'

    parser = argparse.ArgumentParser(
        description="Git commit graph generator")

    parser.add_argument(
        "input",
        help="path to git reposiory, defaults to current.",
        nargs='?',
        default=".")

    parser.add_argument(
        "--output",
        help="path to output graphml, defaults to {}.".format(default_output),
        default="out.graphml")

    parser.add_argument(
        "--range",
        help="commits, e.g.'HEAD~50..'",
        default="")

    args = parser.parse_args()

    commits = yield_commits(args.input, args.range)
    graph = make_graph(commits)
    write_graphml(graph, args.output)
    print("wrote:", args.output)


def write_graphml(graph, filename):

    # write the graph in the 'graphml' format, this is useful because the
    # 'yEd' editor will allow us to load the graph and manipulate it into a
    # form that we are happy with
    graphml = '\n'.join(networkx.generate_graphml(graph))
    with open(filename, "w") as f:
        f.write(graphml)


def make_graph(commits):
    graph = networkx.DiGraph()

    next_parent0 = None

    for subject, name, parents, _decorations, merge_base in commits:

        is_no_ff = False
        if len(parents) > 1:
            for p in parents:
                if merge_base.startswith(p):
                    is_no_ff = True
                    break

        label = ""
        color = "#dc322f"
        if len(parents) > 1:
            if is_no_ff:
                color = "#000000"
            else:
                color = "#fdf6e3"
        elif len(parents) == 0:
            color = "#839496"

        if next_parent0 is None or name == next_parent0:
            is_parent0_lineage = True
        else:
            is_parent0_lineage = False

        graph.add_node(name, label=label, color=color)

        for i, p in enumerate(parents):
            if is_parent0_lineage and not i:
                edge_color = "#ff6600"
            else:
                edge_color = "#000000"
            p_name = p
            graph.add_edge(name, p_name, color=edge_color)

        if is_parent0_lineage and parents:
            next_parent0 = parents[0]

    return graph


def yield_commits(repo_dir, range_=None):
    git_args = ["git", "log", "--format=%f:%h:%p:%d"]
    if range_:
        git_args.append(range_)
    else:
        git_args.append("--all")

    for line in yield_stdout(git_args, cwd=repo_dir):
        commit_info = line.split(':')
        subject = commit_info[0]
        name = commit_info[1]
        parents = commit_info[2].split()
        decorations = commit_info[3].strip().strip('()').split()
        if len(parents) > 1:
            merge_base = git_merge_base(repo_dir, *parents)
        elif len(parents) == 1:
            merge_base = parents[0]
        else:
            merge_base = None
        yield subject, name, parents, decorations, merge_base


def git_merge_base(repo_dir, *commits):
    return call_git(repo_dir, 'merge-base', *commits)


def call_git(cwd, *args):
    return '\n'.join(list(yield_stdout(('git', ) + args, cwd)))


def yield_stdout(args, cwd):

    process = subprocess.Popen(
        args,
        stdout=subprocess.PIPE,
        bufsize=1,
        universal_newlines=True,
        cwd=cwd)

    with process:
        for line in process.stdout:
            yield line


if __name__ == "__main__":
    sys.exit(main())
