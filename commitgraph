#!/usr/bin/env python3
# encoding: utf-8

import argparse
import subprocess
import sys

# networkx must be installed before use
#   $ sudo apt-get install python3-networkx
#
import networkx

# important to read - the graphml won't render nicely by default:
# http://thirld.com/blog/2012/01/31/making-yed-import-labels-from-graphml-files/


def main():
    parser = argparse.ArgumentParser(
        description="Git Commit Graph Generator")

    parser.add_argument(
        "path",
        help="path to git reposiory",
        default=".")

    parser.add_argument(
        "--range",
        help="commits, e.g.'HEAD~50..'",
        default="")

    args = parser.parse_args()

    g = networkx.DiGraph()
    for subject, name, parents in yield_commits(args.path, args.range):
        label = ""
        color = "#dc322f"
        if len(parents) > 1:
            color = "#fdf6e3"
        elif len(parents) == 0:
            color = "#839496"

        g.add_node(name, label=label, color=color)
        for p in parents:
            p_name = p
            g.add_edge(name, p_name)

    # write the graph in the 'graphml' format, this is useful because the
    # 'yEd' editor will allow us to load the graph and manipulate it into a
    # form that we are happy with
    graphml = '\n'.join(networkx.generate_graphml(g))
    filename = "out.graphml"
    with open(filename, "w") as f:
        f.write(graphml)
    print("wrote: " + filename)


def yield_commits(repo_dir, range_=""):
    git_args = ["git", "log", "--all", "--format=%f %h %p"]
    if range_:
        git_args.append(range_)

    for line in yield_stdout(git_args, cwd=repo_dir):
        commit_info = line.split()
        subject = commit_info[0]
        name = commit_info[1]
        parents = commit_info[2:]
        yield subject, name, parents


def yield_stdout(args, cwd):

    process = subprocess.Popen(
        args,
        stdout=subprocess.PIPE,
        bufsize=1,
        universal_newlines=True,
        cwd=cwd)

    with process:
        for line in process.stdout:
            yield line


if __name__ == "__main__":
    sys.exit(main())
